---
description: 
globs: 
alwaysApply: false
---
# Go API Development Guidelines

## API Security, Scalability, and Maintainability

- Implement input validation for all API endpoints.
- Utilize Go's built-in concurrency features (e.g., goroutines, channels) when beneficial for API performance.
- Follow RESTful API design principles and Go best practices.
- Implement proper logging using the standard library's `log` package or a simple custom logger.
- Use middleware for cross-cutting concerns (e.g., logging, authentication, rate limiting).
- Implement rate limiting and authentication/authorization using standard library features or simple custom implementations.
- Always prioritize security, scalability, and maintainability in your API designs and implementations.

## Example
```golang
func validateInput(input string) error {
    if input == "" {
        return errors.New("input cannot be empty")
    }
    return nil
}

func loggingMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        log.Printf("%s %s", r.Method, r.URL.Path)
        next.ServeHTTP(w, r)
    })
}
```
## Handler Structure

1. Use descriptive handler names with HTTP method prefix:
```golang
// Good
func GetUserByID(w http.ResponseWriter, r *http.Request) {
    // Implementation
}

// Bad
func userHandler(w http.ResponseWriter, r *http.Request) {
    // Implementation
}
```

2. Proper error handling:
```golang
// Good
func HandleError(w http.ResponseWriter, err error, status int) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(status)
    json.NewEncoder(w).Encode(map[string]string{"error": err.Error()})
}

// Usage
if err != nil {
    HandleError(w, err, http.StatusBadRequest)
    return
}
```

3. Request validation:
```golang
// Good
func (h *Handler) CreateUser(w http.ResponseWriter, r *http.Request) {
    var user User
    if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
        HandleError(w, err, http.StatusBadRequest)
        return
    }
    
    if err := user.Validate(); err != nil {
        HandleError(w, err, http.StatusBadRequest)
        return
    }
    
    // Process valid request
}
```

## Middleware

1. Standard middleware pattern:
```golang
func LoggingMiddleware(next http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        // Pre-processing
        log.Printf("Request: %s %s", r.Method, r.URL.Path)
        
        next.ServeHTTP(w, r)
        
        // Post-processing
        log.Printf("Completed: %s %s", r.Method, r.URL.Path)
    })
}
```

2. Middleware chaining:
```golang
router.Handle("/api/v1/users", 
    LoggingMiddleware(
        AuthMiddleware(
            HandleUsers(),
        ),
    ),
)
```

## Response Handling

1. Use proper content types:
```golang
w.Header().Set("Content-Type", "application/json")
```

2. Consistent response structure:
```golang
type Response struct {
    Data    interface{} `json:"data,omitempty"`
    Error   string      `json:"error,omitempty"`
    Success bool        `json:"success"`
}

// Usage
func SendResponse(w http.ResponseWriter, data interface{}, status int) {
    w.Header().Set("Content-Type", "application/json")
    w.WriteHeader(status)
    json.NewEncoder(w).Encode(Response{
        Data:    data,
        Success: true,
    })
}
```

## Testing

1. Table-driven tests:
```golang
func TestHandleUser(t *testing.T) {
    tests := []struct {
        name     string
        input    string
        wantCode int
        wantErr  bool
    }{
        {
            name:     "valid user",
            input:    `{"name": "John"}`,
            wantCode: http.StatusOK,
            wantErr:  false,
        },
        // Add more test cases
    }
    
    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {
            // Test implementation
        })
    }
}
```

## Security

1. Always validate input
2. Use prepared statements for SQL
3. Implement proper authentication
4. Set security headers
5. Use HTTPS in production
6. Implement rate limiting

